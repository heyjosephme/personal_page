---
import Layout from "@/layouts/Layout.astro";
import { getCollection } from "astro:content";
import { BlogCard } from "@/components/BlogCard";
import { enhanceBlogPosts } from "@/lib/blog-helpers";
import { RecentlyUpdated } from "@/components/RecentlyUpdated";
import { TrendingTags } from "@/components/TrendingTags";
import { Tags } from "lucide-react";
import type { GetStaticPaths } from "astro";

export const getStaticPaths = (async () => {
  const allPosts = await getCollection("blog");
  const posts = import.meta.env.DEV
    ? allPosts
    : allPosts.filter((post) => !post.data.draft);

  // Get all unique tags
  const tags = new Set<string>();
  posts.forEach((post) => {
    if (post.data.tags && post.data.tags.length > 0) {
      post.data.tags.forEach((tag) => {
        tags.add(tag.toLowerCase());
      });
    }
  });

  // Create a path for each tag
  return Array.from(tags).map((tag) => ({
    params: { slug: tag },
    props: { tag },
  }));
}) satisfies GetStaticPaths;

const { tag } = Astro.props;
const tagTitle = tag.charAt(0).toUpperCase() + tag.slice(1);

// Get all posts
const allPosts = await getCollection("blog");
const posts = import.meta.env.DEV
  ? allPosts
  : allPosts.filter((post) => !post.data.draft);

// Enhance posts with timestamps
const enhancedPosts = await enhanceBlogPosts(posts);

// Filter posts by tag (case insensitive)
const tagPosts = enhancedPosts.filter(
  (post) =>
    post.data.tags &&
    post.data.tags.some((t) => t.toLowerCase() === tag.toLowerCase())
);

// Sort by creation time
const sortedPosts = [...tagPosts].sort((a, b) => {
  return (
    new Date(b.timestamps.createdAt).getTime() -
    new Date(a.timestamps.createdAt).getTime()
  );
});

// Sort by update time for sidebar
const recentlyUpdated = [...enhancedPosts].sort((a, b) => {
  return (
    new Date(b.timestamps.updatedAt).getTime() -
    new Date(a.timestamps.updatedAt).getTime()
  );
});
---

<Layout
  title={`#${tagTitle} - Joseph Ju`}
  description={`Articles tagged with #${tagTitle}`}
>
  <div class="px-4 py-24 mx-auto max-w-7xl">
    <div class="flex flex-col md:flex-row gap-8">
      <!-- Main content -->
      <div class="w-full md:w-4/5">
        <h1 class="text-3xl font-bold mb-6 flex items-center gap-2">
          <Tags className="w-7 h-7 text-primary" />
          <span class="text-primary">{tagTitle}</span>
          <span class="text-lg text-muted-foreground"
            >({sortedPosts.length} posts)</span
          >
        </h1>

        {
          sortedPosts.length === 0 && (
            <p class="text-muted-foreground">No posts found with this tag.</p>
          )
        }

        <div class="grid gap-6">
          {sortedPosts.map((post) => <BlogCard post={post} />)}
        </div>
      </div>

      <!-- Sidebar -->
      <div class="w-full md:w-1/5">
        <div class="flex flex-col gap-10">
          <RecentlyUpdated
            posts={recentlyUpdated}
            maxPosts={5}
            client:visible
          />
          <TrendingTags posts={enhancedPosts} />
        </div>
      </div>
    </div>
  </div>
</Layout>
